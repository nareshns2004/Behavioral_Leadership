Data Structures and Algorithms

1) Sorting
    Introduction to Sorting
    Basics of Asymptotic Analysis and Worst Case & Average Case Analysis
    Different Sorting Algorithms and their comparison
    Algorithm paradigms like Divide & Conquer, Decrease & Conquer, Transform & Conquer
    Presorting
    Extensions of Merge Sort, Quick Sort, Heap Sort
    Common Sorting-related coding interview problems

2) Recursion
    Recursion as a Lazy Manager's Strategy
    Recursive Mathematical Functions
    Combinatorial Enumeration
    Backtracking
    Exhaustive Enumeration & General Template
    Common Recursion- and Backtracking-related coding interview problems

3) Trees
    Dictionaries & Sets, Hash Tables 
    Modeling data as Binary Trees and Binary Search Tree and performing different operations over them
    Tree Traversals and Constructions 
    BFS Coding Patterns
    DFS Coding Patterns
    Tree Construction from its traversals 
    Common Trees-related coding interview problems

4) Graphs
    Overview of Graphs
    Problem definition of the 7 Bridges of Konigsberg and its connection with Graph theory
    What is a Graph, and when do you model a problem as a Graph?
    How to store a Graph in memory (Adjacency Lists, Adjacency Matrices, Adjacency Maps)
    Graphs traversal: BFS and DFS, BFS Tree, DFS stack-based implementation
    A general template to solve any problems modeled as Graphs
    Graphs in Interviews
    Common Graphs-related coding interview problems

5) Dynamic Programming
    Dynamic Programming introduction
    Modeling problems as recursive mathematical functions
    Detecting overlapping subproblems
    Top-down Memorization
    Bottom-up Tabulation
    Optimizing Bottom-up Tabulation
    Common DP-related coding interview problems

===================================================================================================================================================================

System Design

1) Online Processing Systems
    The client-server model of Online processing
    Top-down steps for system design interview
    Depth and breadth analysis
    Cryptographic hash function
    Network Protocols, Web Server, Hash Index
    Scaling
    Performance Metrics of a Scalable System
    SLOs and SLAs
    Proxy: Reverse and Forward
    Load balancing
    CAP Theorem
    Content Distribution Networks
    Cache
    Sharding
    Consistent Hashing
    Storage
    Case Studies: URL Shortener, Instagram, Uber, Twitter, Messaging/Chat Services

2) Batch Processing Systems
    Inverted Index
    External Sort Merge
    K-way External Sort-Merge
    Distributed File System
    Map-reduce Framework
    Distributed Sorting
    Case Studies: Search Engine, Graph Processor, Typeahead Suggestions, Recommendation Systems

3) Stream Processing Systems
    Case Studies: on APM, Social Connections, Netflix, Google Maps, Trending Topics, YouTube

===================================================================================================================================================================

Full Stack Domain

1) Databases
    Questions on databases for various use cases; social media platform - search, user connections, user feeds, ads, payments; how to handle peak hours?
    Design an e-commerce data warehouse to efficiently compute, store and retrieve live metrics at various frequencies
    Design a database solution for a web crawler that scrapes the product and pricing information from a competitor’s e-commerce website
    Design a schema for Apple Music
    Deep dive into database internals (transactions, indexes, and performance)
    Explore Cloud Database Monitoring Tools: Monitoring database health and performance, scale performance via sharding
    Comprehensive coverage of clarifying questions to ask while doing the requirement analysis and scope fencing during the design phase of a database

2) API Design and Implementation
    Design an API for an image-sharing application: Outline which response codes you would use for certain situations on each endpoint
    Identify which user is accessing our API? Ways of identifying a user from an API OAuth, Passwordless authentication, Multi-factor authentication
    How to prevent man-in-the-middle attacks or session replays or cookie stealing/replays?
    Encryption: How much is too much? Enforcing HTTPs
    Design an API for Kick News, a discussion forum like Reddit or Hacker News - architecting, documenting, and testing REST APIs
    Case study on moderation tools - When to use each authentication method and types of authorization
    Call multiple endpoints and join the data on the client-side or implement infinite scrolling using GraphQL
    Implement KickChat, a live chat feature - reacting to server events with polling and webhooks
    Test an API for security threats? Understanding threats and then working on steps to prevent security threats: XSS, CSRF, SQL injection, input sanitization

3) Cloud Infrastructure
    Evaluating cloud-native solutions for cost optimization; Economics of cloud and serverless computing
    Fundamental questions on Key/Value datastores vs. RDBMS
    Design a video transcoding service using a hybrid cloud architecture
    Common problems in cloud-native/serverless systems and how to mitigate them? - Issues with database connections, scaling, and the hug of death
    Interesting follow-up questions on system monitoring and alerts
    How to fix a broken Lambda function?
    Best practices and principles to be followed to meet the FAANG+ bar - DevOps, Infrastructure as Code

4) JavaScript and Web Development
    Design an advertising API using JavaScript
    Application logic using function expression or in-line expression
    Popular FAANG+ interview question on re-writing the promise chain as async/await style code
    How would you indicate that a piece of JavaScript code should only be used for a particular type of variable?
    Using TypeScript to reduce code ambiguity, and in combination with other frameworks
    Make critical design decisions. Manage external dependencies using yarn or an external package
    Develop a Twitter-like homepage, with infinite scrolling - a popular FAANG+ interview question
    How information may be passed down to child components using ‘props’
    Approaches towards dynamically updating web pages - a popular interview skill 
    Questions on using iFrames and web components to incorporate external content
    Incorporating good authorization and security policies for users
    Demo of an OAuth integration, using the Google Drive API

5) UI System Design
    Design a custom control component <SearchBox /> by extending existing controls
    Design a portable UI control that provides a secure and compliant way to capture a payment method - embedding the payment method form in a web application
    Develop a component-based design system to avoid duplicating development efforts - using Storybook.js to support the component library pattern
    Transform state management from a non-framework model to a framework-specific model
    Think, act, and articulate like a front-end architect and tech lead emitting senior+ signals in system design using methodical and structured  strategy
    Evaluate options, perform trade-offs, and analyze the business impact of modern web development frameworks
    Manage the state of a UI application - A demonstration of how to approach programming questions in the UI system design domain
    Design a common components library such as Bootstrap
    Design a UI component SDK such as Stripe checkout SDK - A common theme in UI system design interviews
    Industry trends within front-end engineering and surrounding domains (AI/ML)
